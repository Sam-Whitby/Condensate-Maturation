import math
from itertools import compress
from scipy.stats import multinomial
class Kawasaki_Discrete:
   
    
    def __init__(self,beta=1,dimension=1,particles=2,L=5,seed=0,max_x = 0,D=1,
                min_x = 0,states=None,probs=None):
        self.frame_snaps = dict()
        self.energy_snaps = dict()
        self.bleach_time = 1E9
        self.dimensions = dimension
        np.random.seed(seed)
        self.max_x = max_x
        self.beta= beta
        self.L = L
        self.counter = 0
        self.initial_bonding_position = min_x
        
        
        #we have x positions. Initial, final and the rest equally distributed.
        #solution: make a dictionary that maps the integers to (linearly distb) states
        self.max_states = states
        if self.max_states == 1:
            div = 1
        else:
            div = 1./(self.max_states-1)
        state_J = [self.initial_bonding_position + i*(self.max_x - self.initial_bonding_position)*div for i in range(0,self.max_states)]
        self.position_energy_map = dict(zip([i for i in range(0,self.max_states)],state_J))
        
        
       
        self.possible_positions = list(self.position_energy_map.keys())
        
       # print(self.position_energy_map,self.possible_positions)
        
        if probs == "uniform":
            self.acceptance_probabilities = [1./(self.max_states)]*self.max_states
        elif probs == "first":
            self.acceptance_probabilities = [1] + [0]*(self.max_states-1)
        
       
        radius_2 = int(particles/np.pi)
        #first get the radius
        p = 1
        
         
            
        
        self.particles = particles
        #self.FRAP = False
        self.particle_locations = dict()
        
        
        if self.dimensions == 1:
            self.lattice = np.zeros(self.L,dtype=int)
            self.neighbours = [np.array([-1]),np.array([1])]
            self.neighbour_ids = np.array([0,1])
            
            p = 1  
            while p <= particles:

                self.lattice[p-1] = p
                self.particle_locations[p] = p-1
                p += 1
                    
                    
        elif self.dimensions == 2:
            self.lattice = np.zeros((self.L,self.L),dtype=int)
            self.neighbours = [np.array([-1,0]),
                           np.array([1,0]),
                           np.array([0,1]),
                           np.array([0,-1])]
            self.neighbour_ids = np.array([0,1,2,3])
            
            p = 1
            for coord,site in np.ndenumerate(self.lattice):

                dist = np.array(coord) - self.L/2
                if np.dot(dist,dist) <= radius_2:
                    self.lattice[tuple(coord)] = p
                    self.particle_locations[p] = tuple(coord)
                    p += 1
                    if p == particles:
                        break

            x0,y0 = np.where(self.lattice == 0)       
            while p <= particles:
                r = np.random.randint(len(x0))
                if self.lattice[x0[r],y0[r]] == 0:
                    self.lattice[x0[r],y0[r]] = p
                    self.particle_locations[p] = tuple(coord)
                    p += 1
            
        
            
        else:
            print("ERROR - DIMENSION NOT SUPPORTED")
            return()
        
        
        
        
        
        
        
        
        
        self.unique = 1 + particles
        self.position = np.zeros((self.unique,self.unique),dtype=int)
        self.frame = np.zeros(self.unique,dtype=object)
        self.frame = dict(zip([p for p in range(0,self.unique)],[np.array([0]*self.dimensions) for p in range(0,self.unique)]))
        
        
        #frame is updated if a swap happens which crosses the boundary
        #direction
        
        pairs = self.get_pairs()
        for pair in pairs:
            p1,p2 = pair
            self.position[p1,p2] = 0
            self.position[p2,p1] = 0
        self.results = dict()
        self.pair_count = dict()
        self.D = D
        self.swaps = dict()
        
        self.lattice_snaps = dict()
        self.E = self.total_energy()
        
        
        
    def compare_Boltzmann(self):
        
        #two situations - one where bond starts at 1 and one where starts at 0
        
        energies = list(set(self.results.values()))
        
        occurences = [(i,list(self.results.values()).count(i)) for i in energies]
        

        sim_results = dict()
        theoretical_results = dict()

        data = np.array(list(self.results.values()))
        count = len(data)
        arrangements = math.perm(self.L,2)
        if self.L > 2:
            degeneracy_unbonded = math.perm(self.L,1)*math.perm(self.L-3,1)
        else:
            degeneracy_unbonded = 0
        degeneracy_bonded = (arrangements - degeneracy_unbonded)
        print("AUB",arrangements,degeneracy_unbonded,degeneracy_bonded)
        if degeneracy_unbonded > 0:
            to_add = {0}
        else:
            to_add = set()
        energy_values = set(data).union(to_add)

        #bonded is 0 or 1
        #unbonded is not all the things that are 0

        for x in energy_values:
            print("x=",x,(x <= -self.initial_bonding_position),degeneracy_bonded,np.exp(-self.beta*x),(x==0)*degeneracy_unbonded)
            theoretical_results[x] = (x <= -self.initial_bonding_position)*degeneracy_bonded*np.exp(-self.beta*x) + (x==0)*degeneracy_unbonded


        theoretical_Z = np.sum(list(theoretical_results.values()))
        theoretical_results = dict(zip(theoretical_results.keys(),(1./theoretical_Z)*np.array(list(theoretical_results.values()))))


        for x in energy_values:
            
            r = np.sum(data == x)/count

            sim_results[x] = r

        sim_Z = np.sum(list(sim_results.values()))
        sim_results = dict(zip(sim_results.keys(),(1./sim_Z)*np.array(list(sim_results.values()))))
        print("ST",sim_results,theoretical_results)
        plt.scatter(theoretical_results.values(),sim_results.values())
         #sim_results.keys()))
        plt.plot(theoretical_results.values(), theoretical_results.values())
        
        
    def draw_energies(self):
        pairs = set()
        for coord,site in np.ndenumerate(self.lattice): #range(0,len(self.lattice)):
            
            #site = self.lattice[i]
            if site == 0: #no need to consider solvent
                continue
            for n in self.neighbours:
                n_coord = (np.array(coord)+n)%self.L
                neighbour = self.lattice[tuple(n_coord)]
                #print("HERE",self.counter,(np.array(coord)+n)%self.L)
                if neighbour != 0:

                    pairs.add((tuple(sorted([site,neighbour])),coord))
        E_matrix = np.zeros((self.L,self.L))
        for info in pairs:
           # print("HERE",info)
            p1,p2 = info[0]
            coord = info[1]
            E = -self.position_energy_map[self.position[p1,p2]]*np.sign(p1)*np.sign(p2)
            
            E_matrix[tuple(coord)] += E
        return(E_matrix)
    
    def total_energy(self):
        E = 0
        pairs = self.get_pairs()
        for pair in pairs:
            p1,p2 = pair
        
            E += -self.position_energy_map[self.position[p1,p2]]*np.sign(p1)*np.sign(p2)
        
            
        return(E)
        #gets here, means we just need the 
        
        
        return(-E)
    
    def get_pairs(self):
        pairs = set()
        for coord,site in np.ndenumerate(self.lattice): #range(0,len(self.lattice)):
            
            #site = self.lattice[i]
            if site == 0: #no need to consider solvent
                continue
            for n in self.neighbours:
                n_coord = (np.array(coord)+n)%self.L
                neighbour = self.lattice[tuple(n_coord)]
                #print("HERE",self.counter,(np.array(coord)+n)%self.L)
                if neighbour != 0:
                    
                    pairs.add(tuple(sorted([site,neighbour])))
        
        return(pairs)
    
    def update_position(self):
        
        if len(self.pairs) == 0:
            return()
        
        
        #calculate if diffuses or not
        if np.random.rand() > self.D:
            return()
        
        pair = list(self.pairs)[np.random.randint(len(self.pairs))]
        p1,p2 = pair

        old = np.copy(self.position[p1,p2])
        old_bond_E = -self.position_energy_map[self.position[p1,p2]]
       # new = np.random.randint(self.max_x+1)
        dx = np.random.choice([-1,1])
        new = min(max(old + dx,0),self.max_states-1)
        
        self.position[p1,p2] = new
        self.position[p2,p1] = new
        new_bond_E = - self.position_energy_map[self.position[p1,p2]]
        
        
        new_E = self.E - old_bond_E + new_bond_E # self.total_energy()
      
        
        if np.random.rand() < np.exp(-self.beta*(new_E - self.E)):
            self.E = new_E
        else:
            self.position[p1,p2] = old
            self.position[p2,p1] = old
        return()
        
        
        
    def Kawasaki(self):
        #print("E", self.counter,self.E)
        self.swaps[self.counter] = 0
        
        #get old stuff copied
        
        #shuffle neighbour ids and pick the first one. Use the rest for site 1. Mirror them (* -1 ) for site 2
        np.random.shuffle(self.neighbour_ids)
        
        direction_id = self.neighbour_ids[0]
        
        
        
        direction = self.neighbours[direction_id]
        
      
        
        particle = 1+np.random.randint(self.particles)
        
        
        site1 = tuple(self.particle_locations[particle] + np.array([0]))
        
        adjacent_coordinate = site1 + direction
        PBC_adjacent_coordinate = adjacent_coordinate%self.L

        site2 = tuple(PBC_adjacent_coordinate)
        
        #determine whether it's particle-particle interaction
        
        
        

        site1_env = [self.lattice[tuple((site1+self.neighbours[n_id])%self.L)] for n_id in self.neighbour_ids[1:]]
        site2_env = [self.lattice[tuple((site2-self.neighbours[n_id])%self.L)] for n_id in self.neighbour_ids[1:]]
      
   
        site1_bonds = [self.position[self.lattice[site1],p] for p in site1_env]
        site2_bonds = [self.position[self.lattice[site2],p] for p in site2_env]
        
        pp_interaction = [np.sign(self.lattice[site1])*np.sign(p) for p in site1_env] + [np.sign(self.lattice[site2])*np.sign(p) for p in site2_env]
        pp_interaction_bool = [bool(p) for p in pp_interaction]
        #print("pp_interaction_bool",site1,site2,site1_bonds,site2_bonds)
        
        bond_list = site1_bonds+site2_bonds
        
        
        pp_bonds = list(compress(bond_list, pp_interaction_bool))
       
        
        outcome_count = [pp_bonds.count(v) for v in self.possible_positions]
        
        p = multinomial.pmf(outcome_count, n=len(pp_bonds), p=self.acceptance_probabilities)
        
        if p < np.random.rand():
            return()
        
    
        old_positions = np.copy(self.position)
        
      
        
        x_new = np.random.choice(self.possible_positions,len(bond_list),p=self.acceptance_probabilities)
        
        dE = np.sum([self.position_energy_map[p] for p in pp_bonds])
       # print("NEW", x_new,dE)
       
        p1 = self.lattice[site1]
        p2 = self.lattice[site2]
        
  
        v = 0
        for p_env in site1_env:
            #reset old to 0, get new
            self.position[p1,p_env] = 0
            self.position[p_env,p1] = 0
            self.position[p2,p_env] = x_new[v]*np.sign(p2)*np.sign(p_env)
            self.position[p_env,p2] = self.position[p2,p_env]
            
            
            dE -= self.position_energy_map[self.position[p2,p_env]]*np.sign(p2)*np.sign(p_env)
            v += 1
            
     
        for p_env in site2_env:
            self.position[p2,p_env] = 0
            self.position[p_env,p2] = 0
            self.position[p1,p_env] = x_new[v]*np.sign(p1)*np.sign(p_env)
            self.position[p_env,p1] = self.position[p1,p_env]
            #print("ADDING", p1,p_env,)
           
            dE -= self.position_energy_map[self.position[p1,p_env]]*np.sign(p1)*np.sign(p_env)
            v += 1
       # print("DE ",dE)
        temp = np.copy(self.lattice[tuple(site1)])
        self.lattice[tuple(site1)] = self.lattice[tuple(site2)]
        self.lattice[tuple(site2)] = temp
        
        E_after = (self.E+dE) 
       
      
        
        if np.random.rand() < min(np.exp(-self.beta*(E_after - self.E)),1):
            
          
            self.E = E_after
            self.swaps[self.counter] = 1
            
         
        
            for p_env in site1_env:
                
                self.pairs.discard(tuple(sorted([p1,p_env])))
                if p_env != 0 and p2 != 0:
                    self.pairs.add(tuple(sorted([p2,p_env])))
                
            for p_env in site2_env:
                self.pairs.discard(tuple(sorted([p2,p_env])))
                if p_env != 0:
                    self.pairs.add(tuple(sorted([p1,p_env])))
            
            if p2 != 0:
                self.particle_locations[p2] = site1
            
            self.particle_locations[p1] = site2
            
            #lastly update the frame
            
            if not np.array_equal(adjacent_coordinate,PBC_adjacent_coordinate):
                
                self.frame[p1] += direction
                #print("HERE",adjacent_coordinate,PBC_adjacent_coordinate,direction,self.frame)
                if p2 != 0:
                    self.frame[p2] -= direction
                    
                
                
                
            return()

        #reverse the swap and return positions
        
        temp = np.copy(self.lattice[tuple(site1)])
        self.lattice[tuple(site1)] = self.lattice[tuple(site2)]
        self.lattice[tuple(site2)] = temp
        
        self.position = np.copy(old_positions)
        
    def show(self,bleached=False,plot=True):
        if not bleached:
            if plot:
                plt.imshow(self.lattice != 0)
                return
            else:
                return(self.lattice != 0)
        else:
            #print("SHOWING BLEACHED")
            bl = np.zeros_like(self.lattice)
            for c,v in np.ndenumerate(self.lattice):
                if v not in self.bleached:
                    bl[c] = v
            if plot:
                plt.imshow(bl != 0)
            else:
                return(bl != 0)
        
            
            
        
    def FRAP(self,radius):
        self.bleach_time = self.counter
        self.bleached = set()
        for coord,site in np.ndenumerate(self.lattice):
            
            dist = np.array(coord) - self.L/2
            if np.dot(dist,dist) <= radius**2:
                self.bleached.add(site)
        self.lattice_snaps[self.counter] = self.lattice
        self.frame_snaps[self.counter] = {k: np.array(v) for k, v in self.frame.items()}
        
    def history(self,bleached=False):
        print(self.lattice_snaps.keys())
        fig,axs = plt.subplots(1,len(self.lattice_snaps.keys()))
        fig.set_size_inches(18.5, 4.5)
        fig.suptitle('$\\beta$ = ' + str(self.beta)+', L = ' + str(self.L) + ', D = ' + str(self.D) + ', t = ' + str(self.counter), fontsize=16)
        for i,k in zip(range(0,len(axs)),list(self.lattice_snaps.keys())):
            #print(i,k)
            l = self.lattice_snaps[k] #/(4*self.max_x)
            if bleached and k >= self.bleach_time:
                
                bl = np.zeros_like(l)
                for c,v in np.ndenumerate(l):
                    if v not in self.bleached:
                        bl[c] = v
                    else:
                        frame_dist = self.frame_snaps[k][v] - self.frame_snaps[self.bleach_time][v]
                        if np.dot(frame_dist,frame_dist) != 0:
                            bl[c] = v   
            else:
                bl = l
            axs[i].set_title(k)
            axs[i].matshow(bl,vmin=0,vmax=1)
            axs[i].set_axis_off()
        
     
    
    def iterate(self,iterations=0,snaps=0):
        if snaps > 1:
            every = int(iterations/(snaps-1))
        elif snaps == 1:
            every = iterations
        else:
            every = 1
        t = time.time()
        
        self.pairs = self.get_pairs()
        #print("HERE",self.pairs)
        self.E = self.total_energy()
        self.pair_count[self.counter] = len(self.pairs)
        self.results[self.counter] = self.E
        for iteration in range(0,iterations+1):
            
            if iteration%every==0:
                #t2 = time.time()
                #print(self.counter,t2 - t)
                #t = t2
                self.results[self.counter] = self.E
                self.pair_count[self.counter] = self.pairs
                self.lattice_snaps[self.counter] = np.copy(self.lattice) #self.draw_energies() # self.show(bleached=True,plot=False)
                self.energy_snaps[self.counter] = self.draw_energies() # self.show(bleached=True,plot=False)
                self.frame_snaps[self.counter] = {k: np.array(v) for k, v in self.frame.items()}
            
            self.Kawasaki()
           
            self.update_position()
            #print("U",self.E,self.lattice)
            
            if iteration == iterations:
                return()
            self.counter += 1
        #self.counter -= 1
            
            

import numpy as np
import matplotlib.pyplot as plt
import time
L = 10

a = Kawasaki_Discrete(L=L,dimension=1,beta=1,particles=2,
                      seed = 4,D=1,
                      states=2,min_x=1,max_x = 2,
                     probs = 'first')
#print(a.possible_positions)
#print(a.acceptance_probabilities)
#print(a.position_energy_map)

a.iterate(iterations = 10000,snaps=0)

#a.FRAP(10)
#a.iterate(iterations = 1000,snaps=5)
#a.FRAP(3)
#a.iterate(iterations = 1000,snaps=3)
#a.iterate(iterations = 10000,snaps=2)

#a.show(bleached=False)
#a.history(bleached=True)
#
#print(a.results)

#plt.plot(a.results.keys(),np.array(list(a.results.values())))
#swaps = np.array([np.sum(list(a.swaps.values())[0:i]) for i in range(0,len(a.swaps.keys()))])
#plt.plot(a.swaps.keys(),swaps)
a.compare_Boltzmann()


