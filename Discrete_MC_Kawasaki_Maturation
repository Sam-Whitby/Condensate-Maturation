
class Kawasaki_Discrete:
   
    
    def __init__(self,beta=1,particles=2,L=5,seed=0,max_x = 0,D=1):
        
        np.random.seed(seed)
        self.max_x = max_x
        self.beta= beta
        self.L = L
        self.counter = 0
        self.lattice = np.zeros((self.L,self.L),dtype=int)
        self.particles = particles
        
        #first get the radius
        
        radius = int(np.sqrt(particles)/np.pi)
        print("HERE", radius)
        
        for p in range(0,particles):
            #print(np.floor(p/self.L),p%self.L)
            self.lattice[int(np.floor(p/self.L)),p%self.L] = p+1
        
        
        self.unique = 1 + particles
        self.position = np.zeros((self.unique,self.unique),dtype=int)
        
        self.results = dict()
        self.pair_count = dict()
        self.D = D
        self.swaps = dict()
        self.neighbours = [np.array([-1,0]),
                           np.array([1,0]),
                           np.array([0,1]),
                           np.array([0,-1])]
        self.directions = self.neighbours
        #self.neighbours = np.array([-1,1])
        
    
    
    def total_energy(self):
        E = 0
        pairs = self.get_pairs()
        for pair in pairs:
            p1,p2 = pair
        
            E += -self.position[p1,p2]*np.sign(p1)*np.sign(p2)
        return(E)
        #gets here, means we just need the 
        
        
        return(-E)
    
    def get_pairs(self):
        pairs = set()
        for coord,site in np.ndenumerate(self.lattice): #range(0,len(self.lattice)):
            
            #site = self.lattice[i]
            if site == 0: #no need to consider solvent
                continue
            for n in self.neighbours:
                n_coord = (np.array(coord)+n)%self.L
                neighbour = self.lattice[n_coord[0],n_coord[1]]
                #print("HERE",self.counter,(np.array(coord)+n)%self.L)
                if neighbour != 0:

                    pairs.add(tuple(sorted([site,neighbour])))
        
        return(pairs)
    
    def update_position(self):
        pairs = self.get_pairs()
        self.pairs = len(pairs)
        #self.difs[self.counter] = len(pairs)
        if self.pairs == 0:
            return()
        
        
        #calculate if diffuses or not
        if np.random.rand() > self.D:
            return()
        
        pair = list(pairs)[np.random.randint(self.pairs)]
        p1,p2 = pair

        old = np.copy(self.position[p1,p2])
       # new = np.random.randint(self.max_x+1)
        dx = np.random.choice([-1,1])
        new = min(max(old + dx,0),self.max_x)
        self.position[p1,p2] = new
        self.position[p2,p1] = new
        new_E = self.total_energy()
        if np.random.rand() < np.exp(-self.beta*(new_E - self.E)):
            self.E = new_E
        else:
            self.position[p1,p2] = old
            self.position[p2,p1] = old
        return()
        
        
        
    def Kawasaki(self):
        
        #get old stuff copied
        
        
        
        direction = self.directions[np.random.randint(len(self.directions))]
        perp = np.sum(direction) - direction
        #direction = np.random.choice(self.directions)
        x,y = np.where(self.lattice != 0)
        site1 = np.array([np.random.choice(x),np.random.choice(y)])
        #site1 = np.random.choice(np.where(self.lattice != 0)[0])
        site2 = (site1 + direction)%self.L
        
        #can't break any bonds
        
        #self.E = self.total_energy()
        
    
        
        
        
        p1b = self.lattice[tuple((site1-direction)%self.L)]
        p1u = self.lattice[tuple((site1+perp)%self.L)]
        p1d = self.lattice[tuple((site1-perp)%self.L)]
        p1 = self.lattice[tuple(site1)]
        p2 = self.lattice[tuple(site2)]
        p2f = self.lattice[tuple((site2+direction)%self.L)]
        p2u = self.lattice[tuple((site2+perp)%self.L)]
        p2d = self.lattice[tuple((site2-perp)%self.L)]
        
        bond1 = self.position[p1,p2]*np.sign(p1)*np.sign(p2)
        
        bond2 = self.position[p1,p1b]*np.sign(p1)*np.sign(p1b)
        bond3 = self.position[p2,p2f]*np.sign(p2)*np.sign(p2f)
        
        bond4 = self.position[p2,p2u]*np.sign(p2)*np.sign(p2u)
        bond5 = self.position[p2,p2d]*np.sign(p2)*np.sign(p2d)
        
        bond6 = self.position[p1,p1u]*np.sign(p1)*np.sign(p1u)
        bond7 = self.position[p1,p1d]*np.sign(p1)*np.sign(p1d)
        
        
        
        
        if bond1+bond2+bond3+bond4+bond5+bond6+bond7 != 0:
            return()
        old = np.copy(self.lattice)
        old_positions = np.copy(self.position)
        
        
        
     #   x_new = np.random.choice([0,1],p=[1,0],size=7)
        
        
        #there are three bonds which are broken in 1d Kawasaki
        
        p_i = p1
        
        for p_env in [p2,p2f,p2u,p2d]:
            self.position[p_i,p_env] = 0
            self.position[p_env,p_i] = 0
            
        p_i = p2
        
        for p_env in [p1,p1b,p1u,p1d]:
            self.position[p_i,p_env] = 0
            self.position[p_env,p_i] = 0
        
    #    self.position[p1,p2] = x_new[0]*np.sign(p1)*np.sign(p2)
    #    self.position[p2,p1] = self.position[p1,p2]

     #   self.position[p2,p1b] = x_new[1]*np.sign(p2)*np.sign(p1b)
     #   self.position[p1b,p2] = self.position[p2,p1b]

     #   self.position[p1,p2f] = x_new[2]*np.sign(p1)*np.sign(p2f)
     #   self.position[p2f,p1] = self.position[p1,p2f]
        
       
        #now swap the positions on the lattice
        
        temp = np.copy(self.lattice[tuple(site1)])
        self.lattice[tuple(site1)] = self.lattice[tuple(site2)]
        self.lattice[tuple(site2)] = temp
        
 
        E_after = self.total_energy()
      
        
        if np.random.rand() < min(np.exp(-self.beta*(E_after - self.E)),1):
            self.E = E_after
            self.swaps[self.counter] = 1
            return()

        #reverse the swap and return positions
        self.lattice = np.copy(old)
        self.position = np.copy(old_positions)
     
    
    def iterate(self,iterations=0,every=1):
        
        #print("HERE",self.lattice)
        #print("BEFORE", self.lattice)
        self.E = self.total_energy()
        self.pair_count[self.counter] = 0
        self.results[self.counter] = self.E
        for iteration in range(0,iterations):
            
            self.Kawasaki()
            #
            self.update_position()
            if iteration%every==0:
                self.results[self.counter] = self.E
                self.pair_count[self.counter] = self.pairs
            self.counter += 1
            
            

import numpy as np
import matplotlib.pyplot as plt
L = 100
a = Kawasaki_Discrete(L=L,beta=1,particles=100,seed = 1,max_x = 5,D=1)

a.iterate(iterations=10,every=1)

#print(a.lattice)
#print(a.E_values)
#print(a.difs)
plt.plot(a.results.keys(),[E/(2*a.max_x*a.particles) for E in a.results.values()])
swaps = np.array([np.sum(list(a.swaps.values())[0:i]) for i in range(0,len(a.swaps.keys()))])
#plt.plot(a.swaps.keys(),-swaps/swaps[-1])
#plt.scatter(a.results.keys(),[E/a.max_x for E in a.results.values()],marker='.') #,c = ['r' if d==0 else 'g' for d in a.pair_count.values()])
#print(a.position)
print(a.lattice)
#print(a.results)



