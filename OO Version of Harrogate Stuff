import numpy as np
import matplotlib.pyplot as plt
import math

class Kawasaki:
    def __init__(self,dimension=10,seed=0,density=0.5,epsilon_0 = 1.0,
                 J_var = 0.0,J_max = 10.,mode='linear',
                 s_max=100, beta = 1,delta=1,
                R = 0.0,nstates=0):
        
        self.dimension = dimension
        self.density = density
        self.epsilon_0 = epsilon_0
        self.J_var = J_var
        self.mode = mode
            
        
        self.J_max = J_max
        self.s_max = int(s_max)
        self.delta = 1.0/self.s_max
        #for reproducibility
        np.random.seed(seed)
        #first fill lattice with density amount of s = 1 (s=0 denotes solvent)
        self.lattice = np.zeros((self.dimension,self.dimension),dtype=int)
        self.protein_number = int(self.density*self.dimension**2)
        self.beta = beta
        self.swaps = 0
        self.spins = {0:0}
        self.iterations = 0
        #make a square of root density and randomly add others
        c = int(self.dimension/2)
        side_length = np.sqrt(self.protein_number/np.pi ) 
        protein_id = 1
        
        for i in range(0,self.dimension):
            for j in range(0,self.dimension):
                if np.sqrt((i-c)**2 + (j-c)**2) <= side_length:
                    if protein_id <= self.protein_number:
                        self.lattice[i,j] = protein_id
                        self.spins[protein_id] = 0
                        
                        protein_id += 1
                        
                    
        #might not be exacltly right - remove/add until correct
        
        
        proteins = np.sum(self.lattice>0)
        #may have to add a few more in to get up to right number - add randomly
        while proteins != self.protein_number:
            proteins += 1
            sites = np.where(self.lattice==0)
            site = np.random.randint(len(sites[0]))
            self.lattice[sites[0][site],sites[1][site]] = proteins
            self.spins[proteins] = 0
        #plt.matshow(self.lattice)
        #we can make a dictionary of locations to save time
        
        self.locations = dict()
        
        
        x,y = np.where(self.lattice!=0)
        
        for i,j in zip(x,y):
            
            self.locations[self.lattice[i,j]] = (i,j)
        #return
        

        
        self.neighbours = [np.array([1,-1]),
                           np.array([1,1]),
                           np.array([1,0]),
                           np.array([0,-1]),
                           np.array([0,1]),
                           np.array([-1,-1]),
                           np.array([-1,1]),
                           np.array([-1,0])]
        self.J = np.zeros((self.protein_number+1,self.protein_number+1))
        r = np.random.randn(self.protein_number+1,self.protein_number+1)
        r = np.tril(r) + np.tril(r).T
    
        np.fill_diagonal(r,0)
        r[0,:] = 0
        r[:,0] = 0
        self.J = (np.multiply(self.J_max,r!=0) + self.J_var*r)
         
        
        #now record the position of each potential bond.
        
        if mode == 'rugged':
            self.bond_position = np.zeros_like(self.J,dtype=int)
            self.bond_dt = np.zeros_like(self.J,dtype=int)
            self.R = R
            self.nstates = nstates
            
            self.rugged_energies = dict()
            if self.nstates <= 1:
                self.rugged_energies[0] = -self.J
                self.epsilon_0 = 1.0
            else:
                for p in range(0,2*self.nstates + 1):

                    self.rugged_energies[p] = -(self.J*self.epsilon_0 + (self.J*(1 - self.epsilon_0)*(p-p%2))/(2*self.nstates)) + (p%2)*self.R*(self.J != 0)
            self.dE_function = self.get_dE_pair_rugged
            self.E_function = self.get_energy_rugged
        elif mode == 'linear':
            self.dE_function = self.get_dE_pair_linear
            self.E_function = self.get_energy_linear
            self.smax = s_max
            
            
        
        self.snapshots = dict()
        self.snapshot_energies = dict()
        
        
        
                    
        
                
    def set_parameters(self,J_0 = None,J_var = None,beta = None,J_max = None,s_max = None):
        if epsilon_0 != None:
            self.epsilon_0 = epsilon_0
        if J_var != None:
            self.J_var = J_var
        if beta != None:
            self.beta = beta
       
        if J_max != None:
            self.J_max = J_max
        if s_max != None:
            self.s_max = int(s_max)
        self.delta = 1.0/self.s_max
        
     
     
    def integrate_bond(self,id_i,id_j):
        #brings a bond up to present state
        si = self.iterations - self.spins[id_i]
        sj = self.iterations - self.spins[id_j]
        delta_t = np.minimum(si,sj) - self.bond_dt[id_i,id_j]
        #print("dt", delta_t)
        
        #takes a bond at self.position[id_i,id_j] and evaluates delta_t Monte-Carlo steps
        p = self.bond_position[id_i,id_j]
        E = self.rugged_energies[p][id_i,id_j]
       
        for iteration in range(0,delta_t):
            direction = np.random.choice([-1,1])
            p_new = max(min(p+direction,2*self.nstates),0)
            
            E_new = self.rugged_energies[p_new][id_i,id_j]
           
            if np.random.rand() < np.exp(-self.beta*(E_new - E)):
               
                p = p_new
                E = E_new
        self.bond_dt[id_i,id_j] = np.minimum(si,sj) 
        self.bond_dt[id_j,id_i] = self.bond_dt[id_i,id_j] 
        #self.spins[id_i] = self.iterations
        #self.spins[id_j] = self.iterations
        self.bond_position[id_i,id_j] = p
        self.bond_position[id_j,id_i] = p
        
    def get_energy_linear(self,ci):
        id_i = self.lattice[ci[0],ci[1]]
        if id_i == None:
            return(0)
        si = self.iterations - self.spins[id_i]
        j_coords = np.array([np.array(ci) + n for n in self.neighbours])%self.dimension
        j_ids = [self.lattice[cj[0],cj[1]] for cj in j_coords]
        sj = [self.iterations - self.spins[id_j] if id_j != 0 else 0 for id_j in j_ids]
        
        J_ij = [self.J[id_i,id_j]  for id_j in j_ids]
        E = -np.dot(J_ij,np.minimum(np.minimum(si,sj),self.s_max)*self.delta*(1. - self.epsilon_0) + self.epsilon_0)
        
        return(E)
        
                                    
    def get_energy_rugged(self,ci):
        id_i = self.lattice[ci[0],ci[1]]
        if id_i == None:
            return(0)
        
        j_coords = np.array([np.array(ci) + n for n in self.neighbours])%self.dimension
        j_ids = [self.lattice[cj[0],cj[1]] for cj in j_coords]
        
        E = 0
        for id_j in j_ids:
            if id_j != 0:    
                if self.nstates > 1:
                    self.integrate_bond(id_i,id_j)
                #print("integrating",id_i,id_j,self.bond_position[id_i,id_j]) 
                E += self.rugged_energies[self.bond_position[id_i,id_j]][id_i,id_j]
        #print("E", E)
       # E = -np.dot(J_ij,np.minimum(np.minimum(si,sj),self.s_max)*self.delta*(1. - self.epsilon_0) + self.epsilon_0)
        #print(self.iterations,id_i,"to return", E)
        return(E)
    
    
    
    
        
    
    def get_pair_energy(self,ci,cj):
        id_i = self.lattice[ci[0],ci[1]]
        id_j = self.lattice[cj[0],cj[1]]
        
        Ei = self.get_energy(ci) #energy at site i
        
        
        
        if id_j != 0:
            Ej = self.get_energy(cj)
            #then need to subtract the energy between sites
            J_ij = self.J[id_i,id_j]
            si = self.iterations - self.spins[id_i]
            sj = self.iterations - self.spins[id_j]
            E_tot = Ei + Ej + self.rugged_energies[self.bond_position[id_i,id_j]][id_i,id_j]
        else:
            E_tot = Ei
            
        
        return(E_tot)
    
    def swap(self,ci,cj):
        id_i = self.lattice[ci[0],ci[1]]
        id_j = self.lattice[cj[0],cj[1]]
        if id_j == 0:
            #print(iteration)
            self.locations[id_i] = tuple(cj)
            
            self.lattice[cj[0],cj[1]] = self.lattice[ci[0],ci[1]]
            self.lattice[ci[0],ci[1]] = 0

        else:

            self.locations[id_i] = cj
            self.locations[id_j] = ci
            temp = self.lattice[cj[0],cj[1]]
            self.lattice[cj[0],cj[1]] = self.lattice[ci[0],ci[1]]
            self.lattice[ci[0],ci[1]] = temp
            
    def get_dE_pair_linear(self,ci,cj):
        id_i = self.lattice[ci[0],ci[1]]
        id_j = self.lattice[cj[0],cj[1]]
        si_before = self.iterations - self.spins[id_i]
        ai_coords = np.array([np.array(ci) + n for n in self.neighbours])%self.dimension #coordinates adjacent to i

        ai_ids = [self.lattice[ai[0],ai[1]] for ai in ai_coords]
        sai = [(self.iterations - self.spins[ai_id]) if ai_id != 0 else 0 for ai_id in ai_ids]

        J_i_ai = [self.J[id_i,id_ai]  for id_ai in ai_ids]

        aj_coords = np.array([np.array(cj) + n for n in self.neighbours])%self.dimension #coordinates adjacent to i

        aj_ids = [self.lattice[aj[0],aj[1]] for aj in aj_coords]
        saj = [(self.iterations - self.spins[aj_id]) if aj_id != 0 else 0 for aj_id in aj_ids]



        J_i_aj = [self.J[id_i,id_aj]  for id_aj in set(aj_ids).union({id_j}).difference({id_i})]

        E_i_before = -np.dot(J_i_ai,np.minimum(np.minimum(si_before,sai),self.s_max)*self.delta*(1. - self.epsilon_0) + self.epsilon_0)
        E_i_after = -np.sum(J_i_aj)*self.epsilon_0

        if id_j != 0:
            J_j_aj = [self.J[id_j,id_aj]  for id_aj in aj_ids]
            sj_before = self.iterations - self.spins[id_j]
            J_j_ai = [self.J[id_j,id_ai]  for id_ai in set(ai_ids).union({id_i}).difference({id_j})]
            E_j_before = -np.dot(J_j_aj,np.minimum(np.minimum(sj_before,saj),self.s_max)*self.delta*(1. - self.epsilon_0) + self.epsilon_0)

            E_j_after = -np.sum(J_j_ai)*self.epsilon_0
            bond_between_before = -self.J[id_i,id_j]*(np.minimum(np.minimum(si_before,sj_before),self.s_max)*self.delta*(1. - self.epsilon_0) + self.epsilon_0)
            bond_between_after = -self.J[id_i,id_j]*self.epsilon_0
         #d_bond_between = bond_between_after + bond_between_before
        else:
            E_j_before = 0
            E_j_after = 0
            bond_between_before = 0
            bond_between_after = 0

        dE = (E_i_after + E_j_after - bond_between_after)-(E_i_before + E_j_before - bond_between_before)
        return dE
    
    def get_dE_pair_rugged(self,ci,cj):
        #this calculates the change in energy if this pair is swapped.
        id_i = self.lattice[ci[0],ci[1]]
        id_j = self.lattice[cj[0],cj[1]]
        
        E_i_before = self.get_energy(ci)
        E_j_before = self.get_energy(cj)
        
        si_before = self.iterations - self.spins[id_i]
        ai_coords = np.array([np.array(ci) + n for n in self.neighbours])%self.dimension #coordinates adjacent to i
        
        ai_ids = [self.lattice[ai[0],ai[1]] for ai in ai_coords]
        sai = [(self.iterations - self.spins[ai_id]) if ai_id != 0 else 0 for ai_id in ai_ids]
        
        J_i_ai = [self.J[id_i,id_ai]  for id_ai in ai_ids]
        
        aj_coords = np.array([np.array(cj) + n for n in self.neighbours])%self.dimension #coordinates adjacent to i
        
        aj_ids = [self.lattice[aj[0],aj[1]] for aj in aj_coords]
        saj = [(self.iterations - self.spins[aj_id]) if aj_id != 0 else 0 for aj_id in aj_ids]
        
        
        
        J_i_aj = [self.J[id_i,id_aj]  for id_aj in set(aj_ids).union({id_j}).difference({id_i})]
        
     #   E_i_before = -np.dot(J_i_ai,np.minimum(np.minimum(si_before,sai),self.s_max)*self.delta*(1. - self.epsilon_0) + self.epsilon_0)
        E_i_after = -np.sum(J_i_aj)*self.epsilon_0
      
        
        if id_j != 0:
            J_j_aj = [self.J[id_j,id_aj]  for id_aj in aj_ids]
            sj_before = self.iterations - self.spins[id_j]
            J_j_ai = [self.J[id_j,id_ai]  for id_ai in set(ai_ids).union({id_i}).difference({id_j})]
    #        E_j_before = -np.dot(J_j_aj,np.minimum(np.minimum(sj_before,saj),self.s_max)*self.delta*(1. - self.epsilon_0) + self.epsilon_0)
            
            E_j_after = -np.sum(J_j_ai)*self.epsilon_0
            bond_between_before = self.rugged_energies[self.bond_position[id_i,id_j]][id_i,id_j]
        #    bond_between_before = -self.J[id_i,id_j]*(np.minimum(np.minimum(si_before,sj_before),self.s_max)*self.delta*(1. - self.epsilon_0) + self.epsilon_0)
            
            
            bond_between_after = self.rugged_energies[0][id_i,id_j]
            #d_bond_between = bond_between_after + bond_between_before
        else:
            E_j_before = 0
            E_j_after = 0
            bond_between_before = 0
            bond_between_after = 0
            
        
        
       
        dE = (E_i_after + E_j_after - bond_between_after)-(E_i_before + E_j_before - bond_between_before)
        #print("dE",(E_i_after , E_j_after , bond_between_after),(E_i_before , E_j_before , bond_between_before))
        return dE
    
    def get_total_energy(self):
        
        self.total_energy = 1.0*np.zeros_like(self.lattice)
        for i in range(0,self.dimension):
            for j in range(0,self.dimension):
                
                
                self.total_energy[i,j] = self.E_function((i,j))
         
        self.total_energy /= (-8*self.J_max)

        
    def evolve_Kawasaki(self,steps,snapshots=10):
        self.get_total_energy()
        self.snapshots[self.iterations] = np.copy(self.total_energy)
        self.snapshot_energies[self.iterations] = np.sum(self.total_energy)/self.protein_number
        
        if snapshots > 0:
            every = int(steps/snapshots)
        else:
            every = steps + 2
        #print("gives", every)
        
        for iteration in range(0,steps+1):
            if (iteration)%every == 0:
                #print("Doing snapshot---------------", iteration)
                self.get_total_energy()
                self.snapshots[self.iterations] = np.copy(self.total_energy)
                self.snapshot_energies[self.iterations] = np.sum(self.total_energy)/self.protein_number
            #pick a random id from locations
            
           
            
            
            
            id_i = 1 + np.random.randint(self.protein_number-1)
            
            coord_i = self.locations[id_i]
            #get a random neighbour (lets do neighbourhood of 8)
            direction = np.random.randint(8)
            coord_j = tuple((coord_i + self.neighbours[direction])%self.dimension)
            id_j = self.lattice[coord_j[0],coord_j[1]]
            
            
            #dE = self.get_dE_pair_(coord_i,coord_j)
            
            dE = self.dE_function(coord_i,coord_j)
            
            
            
            if np.random.rand() <  np.exp(min(-self.beta*(dE),0)):
                
                self.swaps += 1
                
                self.swap(coord_i,coord_j)
                self.spins[id_i] = self.iterations
                self.spins[id_j] = self.iterations
                if self.mode == 'rugged':
                    self.bond_position[id_i,:] = 0 #reset all their interactions
                    self.bond_position[id_j,:] = 0 #reset all their interactions
                
                
                    
            
            self.spins[0] = 0
            self.iterations += 1
            
            
            
        #self.iterations += steps #global interation counter so can restart
   
    def plot(self):
        self.get_total_energy()
        #plot the energy of the lattice
         #to prevent double counting all the bonds
        plt.matshow(self.total_energy,vmin=0,vmax=1)
        
        plt.colorbar(label="Average bond strength at site as fraction of J_max",
                     orientation='horizontal')
                    
        plt.title("J_max = " + str(self.J_max))
    def plot_evolution(self,titles="on"):
        fig, axs = plt.subplots(1,len(self.snapshots))
        fig.set_size_inches(20,3)
        for i,key in zip(range(0,len(self.snapshots)),self.snapshots.keys()):
            #print(i,key)
            im = axs[i].matshow(self.snapshots[key],vmin=0,vmax=1)
            axs[i].axis('off')
            if titles == "on":
                axs[i].set_title("t = " + str(key)) #+ " "+str(np.sum(self.snapshots[key])))
        if titles == "on":
            fig.colorbar(im, ax=axs.ravel().tolist(),orientation='horizontal',label="Average bond strength")

L = Kawasaki(dimension=31,density=0.5,seed=3,epsilon_0 = 0,J_var = 0,J_max=10,mode='linear',
             beta = 0.0,nstates=5,R=5,s_max = 500) 
#print(L)
L.evolve_Kawasaki(10000,5)

#
L.plot_evolution()
